// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nekr0z/muhadi/internal/api/handlers/withdrawal (interfaces: WithdrawalService)
//
// Generated by this command:
//
//	mockgen -destination mocks/os_mock.go -package mocks . WithdrawalService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	balance "github.com/nekr0z/muhadi/internal/balance"
	gomock "go.uber.org/mock/gomock"
)

// MockWithdrawalService is a mock of WithdrawalService interface.
type MockWithdrawalService struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalServiceMockRecorder
	isgomock struct{}
}

// MockWithdrawalServiceMockRecorder is the mock recorder for MockWithdrawalService.
type MockWithdrawalServiceMockRecorder struct {
	mock *MockWithdrawalService
}

// NewMockWithdrawalService creates a new mock instance.
func NewMockWithdrawalService(ctrl *gomock.Controller) *MockWithdrawalService {
	mock := &MockWithdrawalService{ctrl: ctrl}
	mock.recorder = &MockWithdrawalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawalService) EXPECT() *MockWithdrawalServiceMockRecorder {
	return m.recorder
}

// GetWithdrawals mocks base method.
func (m *MockWithdrawalService) GetWithdrawals(ctx context.Context, userName string) ([]balance.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, userName)
	ret0, _ := ret[0].([]balance.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockWithdrawalServiceMockRecorder) GetWithdrawals(ctx, userName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockWithdrawalService)(nil).GetWithdrawals), ctx, userName)
}

// Withdraw mocks base method.
func (m *MockWithdrawalService) Withdraw(ctx context.Context, userName string, orderID int, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, userName, orderID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockWithdrawalServiceMockRecorder) Withdraw(ctx, userName, orderID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockWithdrawalService)(nil).Withdraw), ctx, userName, orderID, amount)
}
