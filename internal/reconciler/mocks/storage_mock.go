// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nekr0z/muhadi/internal/reconciler (interfaces: OrderStorage)
//
// Generated by this command:
//
//	mockgen -destination mocks/storage_mock.go -package mocks . OrderStorage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	order "github.com/nekr0z/muhadi/internal/order"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderStorage is a mock of OrderStorage interface.
type MockOrderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStorageMockRecorder
	isgomock struct{}
}

// MockOrderStorageMockRecorder is the mock recorder for MockOrderStorage.
type MockOrderStorageMockRecorder struct {
	mock *MockOrderStorage
}

// NewMockOrderStorage creates a new mock instance.
func NewMockOrderStorage(ctrl *gomock.Controller) *MockOrderStorage {
	mock := &MockOrderStorage{ctrl: ctrl}
	mock.recorder = &MockOrderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStorage) EXPECT() *MockOrderStorageMockRecorder {
	return m.recorder
}

// FirstInQueue mocks base method.
func (m *MockOrderStorage) FirstInQueue(arg0 context.Context) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstInQueue", arg0)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstInQueue indicates an expected call of FirstInQueue.
func (mr *MockOrderStorageMockRecorder) FirstInQueue(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstInQueue", reflect.TypeOf((*MockOrderStorage)(nil).FirstInQueue), arg0)
}

// Update mocks base method.
func (m *MockOrderStorage) Update(arg0 context.Context, arg1 *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrderStorageMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderStorage)(nil).Update), arg0, arg1)
}
