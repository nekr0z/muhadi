// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nekr0z/muhadi/internal/reconciler (interfaces: Accrual)
//
// Generated by this command:
//
//	mockgen -destination mocks/accrual_mock.go -package mocks . Accrual
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAccrual is a mock of Accrual interface.
type MockAccrual struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualMockRecorder
	isgomock struct{}
}

// MockAccrualMockRecorder is the mock recorder for MockAccrual.
type MockAccrualMockRecorder struct {
	mock *MockAccrual
}

// NewMockAccrual creates a new mock instance.
func NewMockAccrual(ctrl *gomock.Controller) *MockAccrual {
	mock := &MockAccrual{ctrl: ctrl}
	mock.recorder = &MockAccrualMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrual) EXPECT() *MockAccrualMockRecorder {
	return m.recorder
}

// Status mocks base method.
func (m *MockAccrual) Status(ctx context.Context, order int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx, order)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockAccrualMockRecorder) Status(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockAccrual)(nil).Status), ctx, order)
}
