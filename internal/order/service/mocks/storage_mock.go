// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nekr0z/muhadi/internal/order/service (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -destination mocks/storage_mock.go -package mocks . Storage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	order "github.com/nekr0z/muhadi/internal/order"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockStorage) CreateOrder(arg0 context.Context, arg1 *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStorageMockRecorder) CreateOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStorage)(nil).CreateOrder), arg0, arg1)
}

// GetOrder mocks base method.
func (m *MockStorage) GetOrder(ctx context.Context, id int) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, id)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStorageMockRecorder) GetOrder(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStorage)(nil).GetOrder), ctx, id)
}

// GetOrders mocks base method.
func (m *MockStorage) GetOrders(ctx context.Context, userName string) ([]*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, userName)
	ret0, _ := ret[0].([]*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockStorageMockRecorder) GetOrders(ctx, userName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockStorage)(nil).GetOrders), ctx, userName)
}

// TotalAccrual mocks base method.
func (m *MockStorage) TotalAccrual(ctx context.Context, userName string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalAccrual", ctx, userName)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalAccrual indicates an expected call of TotalAccrual.
func (mr *MockStorageMockRecorder) TotalAccrual(ctx, userName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalAccrual", reflect.TypeOf((*MockStorage)(nil).TotalAccrual), ctx, userName)
}
